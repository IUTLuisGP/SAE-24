import numpy as np
import math 
import random
import time


nb_colonnes=16
nb_lignes=16

#Part 1 of the code corresponding to receiving amplitude

#Definition of the amplitude of each sensor
def Table_Capteur(posx, posy):
    Amp_Capteur=np.zeros((nb_colonnes,nb_lignes))
    for i in range(nb_colonnes):
      for j in range(nb_lignes):
        diviseur = (i - posx)*(i - posx)+(j - posy)*(j - posy)
        if diviseur == 0 :
             Amp_Capteur[i,j]=1
        else:
          Amp_Capteur[i,j]=1/(math.sqrt(diviseur))      
    return Amp_Capteur
 
#--------------------------------------------

#Setting up a Random Positioning
def Random(ancien_x,ancien_y):
  range= [-1, 0, 0, 1]
  if ancien_x == 0 :
    temp_x=(random.randint(0,1))
  elif ancien_x == nb_colonnes-1 :
    temp_x=(random.randint(-1,0))
  else :
    temp_x=random.choice(range)
  
  if ancien_y == 0 :
    if temp_x==0 :
      temp_y=1
    else :
      temp_y=0
  elif ancien_y == nb_lignes-1 :
    if temp_x==0 :
      temp_y=-1
    else :
      temp_y=0
  else :
    if temp_x==0:
      range= [-1, 1]
      temp_y=random.choice(range)
    else :
      temp_y=0
  nouveau_x = ancien_x + temp_x
  nouveau_y = ancien_y + temp_y
  print(nouveau_x, nouveau_y)
  return nouveau_x, nouveau_y
  
#--------------------------------------------

#Definition of the amplitude of each cell in relation to the object
def Amplitude(posx, posy):
  Amplitude=np.zeros((nb_colonnes,nb_lignes))
  for i in range(nb_colonnes):
    for j in range(nb_lignes):
      diviseur = (i - posx)*(i - posx)+(j - posy)*(j - posy)
      if diviseur == 0 :  
           Amplitude[i,j]=1    
      else:
        Amplitude[i,j]=1/(math.sqrt(diviseur))     
  C1 = Amplitude[0][0]
  C2 = Amplitude[0][nb_colonnes-1]
  C3 = (Amplitude[nb_lignes-1][nb_colonnes-1])
  
  return C1 , C2 , C3

#--------------------------------------------  
#Convert a decimal to binary
  
def binary(Capteur):

  Capteur = bin(round(Capteur*10**8))
  return Capteur
#--------------------------------------------  

j=0

#Initialization of Amplitudes for each sensor's cell
Capteur_1_Ampli=Table_Capteur(0, 0)
Capteur_2_Ampli=Table_Capteur(0, nb_lignes-1)
Capteur_3_Ampli=Table_Capteur(nb_colonnes-1, nb_lignes-1)

#Initialization of the initial position of the object
Position_finale=np.array([nb_colonnes-1,nb_lignes/2])

#Loop allowing the movement of the object and the calculation of its position
while j <1 :
  
  Position= Random(Position_finale[0],Position_finale[1])
  
  Ampli= Amplitude(Position[0],Position[1])
  
  Capteur1=binary(Ampli[0])
  Capteur2=binary(Ampli[1])
  Capteur3=binary(Ampli[2])





#Part 2 of the code corresponding to the calculation of the position
  
#Allows you to see the possible boxes depending on the amplitude received
def Table_Conversion(matrice_capteur, amp):
    Conv_Capteur=np.zeros((nb_colonnes,nb_lignes))
    print(amp)
    for i in range(nb_colonnes):
        for j in range(nb_lignes):
            if matrice_capteur[i,j] == amp :
                Conv_Capteur[i,j]=1
            else:
                Conv_Capteur[i,j]=0
    return Conv_Capteur
  
#-------------------------------------------- 
  
#Comparison of Possible Positions to find the position of the object

def Compare(matrice_c1, matrice_c2, matrice_c3):
    for i in range(nb_colonnes):
      for j in range(nb_lignes):
        if matrice_c1[i,j] == matrice_c2[i,j] and  matrice_c1[i,j] == matrice_c3[i,j] and  matrice_c1[i,j] == 1 :
          position_x=i
          position_y=j
    return position_x, position_y
  
#-------------------------------------------- 
#Convert a binary to decimal
  
def binary_to_decimal(binary):  
    
    if "0b" in binary:
        binary = binary.replace("0b", "")
        
    total = 0
    for i, bit in enumerate(binary[::-1]):
        total += int(bit) * 2**i
    return total

#--------------------------------------------  

binary_to_decimal(Capteur1)
  binary_to_decimal(Capteur2)
  binary_to_decimal(Capteur3)

  
  Capteur_1_conv=Table_Conversion(Capteur_1_Ampli,Ampli[0])
  Capteur_2_conv=Table_Conversion(Capteur_2_Ampli,Ampli[1])
  Capteur_3_conv=Table_Conversion(Capteur_3_Ampli,Ampli[2])

  
  Position_finale=Compare(Capteur_1_conv,Capteur_2_conv,Capteur_3_conv)
  
  print(Position_finale)
  time.sleep(2)
